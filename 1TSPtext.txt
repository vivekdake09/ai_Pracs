import numpy as np


     

def calculate_distance(city1, city2):
    return np.linalg.norm(np.array(city1) - np.array(city2))


     

def nearest_neighbor_algorithm(city_coordinates):
    num_cities = len(city_coordinates)
    unvisited_cities = set(range(num_cities))
    tour = []

    # Start from a random city
    current_city = np.random.choice(list(unvisited_cities))
    unvisited_cities.remove(current_city)
    tour.append(current_city)

    while unvisited_cities:
        nearest_city = min(
            unvisited_cities,
            key=lambda city: calculate_distance(city_coordinates[current_city], city_coordinates[city])
        )
        unvisited_cities.remove(nearest_city)
        tour.append(nearest_city)
        current_city = nearest_city

    return tour


     

def calculate_total_distance(tour, city_coordinates):
    total_distance = 0
    for i in range(len(tour)):
        start_city = city_coordinates[tour[i]]
        end_city = city_coordinates[tour[(i + 1) % len(tour)]]  # Loop back to start
        total_distance += calculate_distance(start_city, end_city)
    return total_distance


     

city_coordinates = [(0, 0), (2, 3), (5, 4), (1, 6), (6, 1), (3, 5)]

tour = nearest_neighbor_algorithm(city_coordinates)
total_distance = calculate_total_distance(tour, city_coordinates)

print("Optimal tour:", tour)
print("Total distance:", total_distance)

//
Step	Current City (Index)	Coordinates	Nearest City Chosen (Index)	Nearest City Coordinates	Distance
1	1	(2, 3)	5	(3, 5)	2.24
2	5	(3, 5)	2	(5, 4)	2.24
3	2	(5, 4)	4	(6, 1)	3.16
4	4	(6, 1)	0	(0, 0)	6.08
5	0	(0, 0)	3	(1, 6)	6.08
6	3	(1, 6)	1 (start city)	(2, 3)	3.16
[1, 5, 2, 4, 0, 3]

/*
1. What is the Travelling Salesperson Problem (TSP)?
TSP is a classic optimization problem in which a salesperson must:

Visit each city exactly once,

Return to the starting city, and

Do so while minimizing the total travel distance or cost.

2. Why is TSP considered an NP-Hard problem?
TSP does not have a known polynomial-time algorithm to solve it exactly.

The number of possible tours is (n - 1)!/2 for n cities (undirected, symmetric case).

As the number of cities increases, the number of possibilities grows exponentially.

3. Explain the Nearest Neighbor heuristic.
Start at a random city.

At each step, go to the nearest unvisited city.

Repeat until all cities are visited.

Return to the starting city to complete the tour.

4. What are the limitations of the Nearest Neighbor algorithm?
Greedy: Chooses the local best, not the global best.

Result depends on starting city.

May miss better overall paths because it doesnâ€™t backtrack.

May produce suboptimal results, especially with large or irregular city layouts.

5. Can TSP be solved exactly for large numbers of cities? Why or why not?
No, not efficiently.

Exact algorithms (like Dynamic Programming, Branch and Bound) become too slow as the number of cities increases.

Thatâ€™s why heuristics or approximations are used in practice for large datasets.

ðŸ“— Code-Based Questions
6. What does np.linalg.norm() compute in this context?
It calculates the Euclidean distance between two points (cities).

â€‹
 
7. Why is the tour made circular using % len(tour)?
To return to the starting city at the end of the tour.

tour[(i + 1) % len(tour)] ensures that the last city connects back to the first, making it a closed loop.

8. What is the purpose of the unvisited_cities set?
To track which cities are not yet visited.

Helps ensure each city is visited only once.

Improves performance for checking membership (O(1) in a set).

9. What is the time complexity of this algorithm?
O(nÂ²)

ðŸ“™ Practical Extensions
10. How would you improve this algorithm for better accuracy?
Apply local search optimizations like:

2-opt or 3-opt (swap segments to reduce tour length).

Genetic Algorithms

Simulated Annealing

Ant Colony Optimization

Try multiple starting points and take the best tour.

11. Can this be used for real-time delivery systems? Why or why not?
Not directly optimal for real-time use due to:

Lack of dynamic updates (e.g., traffic, delays).

Doesnâ€™t handle time windows or priority deliveries.

Can be used for initial routing, then refined using real-time data and adaptive algorithms.
*/
